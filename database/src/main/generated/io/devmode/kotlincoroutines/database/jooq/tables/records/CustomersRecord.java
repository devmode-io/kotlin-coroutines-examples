/*
 * This file is generated by jOOQ.
 */
package io.devmode.kotlincoroutines.database.jooq.tables.records;


import io.devmode.kotlincoroutines.database.jooq.tables.Customers;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CustomersRecord extends UpdatableRecordImpl<CustomersRecord> implements Record3<String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.customers.id</code>.
     */
    public CustomersRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.customers.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.customers.first_name</code>.
     */
    public CustomersRecord setFirstName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.customers.first_name</code>.
     */
    public String getFirstName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.customers.last_name</code>.
     */
    public CustomersRecord setLastName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.customers.last_name</code>.
     */
    public String getLastName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Customers.CUSTOMERS.ID;
    }

    @Override
    public Field<String> field2() {
        return Customers.CUSTOMERS.FIRST_NAME;
    }

    @Override
    public Field<String> field3() {
        return Customers.CUSTOMERS.LAST_NAME;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getFirstName();
    }

    @Override
    public String component3() {
        return getLastName();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getFirstName();
    }

    @Override
    public String value3() {
        return getLastName();
    }

    @Override
    public CustomersRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public CustomersRecord value2(String value) {
        setFirstName(value);
        return this;
    }

    @Override
    public CustomersRecord value3(String value) {
        setLastName(value);
        return this;
    }

    @Override
    public CustomersRecord values(String value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CustomersRecord
     */
    public CustomersRecord() {
        super(Customers.CUSTOMERS);
    }

    /**
     * Create a detached, initialised CustomersRecord
     */
    public CustomersRecord(String id, String firstName, String lastName) {
        super(Customers.CUSTOMERS);

        setId(id);
        setFirstName(firstName);
        setLastName(lastName);
        resetChangedOnNotNull();
    }
}
